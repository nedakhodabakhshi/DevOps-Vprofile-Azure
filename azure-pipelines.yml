trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  ACR_NAME: 'vprofileacr'  # Replace with your Azure Container Registry name
  RESOURCE_GROUP: 'vprofile-rg'
  AKS_NAME: 'vprofile-aks'
  IMAGE_NAME: 'vprofile-app'
  IMAGE_TAG: 'latest'

stages:
- stage: Build
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push Docker Image'
    steps:
    - task: AzureCLI@2
      displayName: 'Login to Azure'
      inputs:
        azureSubscription: 'Azure subscription 1' # Replace with your actual service connection name
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name $(ACR_NAME)

    - script: |
        docker build -t $(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(IMAGE_TAG) .
        docker push $(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(IMAGE_TAG)
      displayName: 'Build and Push Image to ACR'

- stage: Deploy
  jobs:
  - job: DeployToAKS
    displayName: 'Deploy to AKS'
    steps:
    - task: AzureCLI@2
      displayName: 'Fetch Secrets from Azure Key Vault'
      inputs:
        azureSubscription: 'Azure subscription 1'  # Ensure this is correct
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Fetching secrets from Azure Key Vault..."
          REDIS_PASSWORD=$(az keyvault secret show --name redis-password --vault-name vprofile-keyvault --query value -o tsv)
          SERVICEBUS_CONNECTION_STRING=$(az keyvault secret show --name servicebus-connection-string --vault-name vprofile-keyvault --query value -o tsv)
          
          echo "##vso[task.setvariable variable=REDIS_PASSWORD;issecret=true]$REDIS_PASSWORD"
          echo "##vso[task.setvariable variable=SERVICEBUS_CONNECTION_STRING;issecret=true]$SERVICEBUS_CONNECTION_STRING"

    - task: Kubernetes@1
      displayName: 'Deploy Application'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: 'Azure subscription 1' # Ensure this is correct
        azureResourceGroup: '$(RESOURCE_GROUP)'
        kubernetesCluster: '$(AKS_NAME)'
        command: 'apply'
        arguments: '-f deployment.yaml -f service.yaml'
