trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: vProfile-Secrets  # Load secrets from Azure DevOps Library
- name: IMAGE_TAG
  value: 'latest'

stages:
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: Build
    steps:
    
    # 1️⃣ Build the Java Application to Generate vprofile-v2.war
    - task: Maven@4
      displayName: 'Build with Maven'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean package'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx1024m'

    # 2️⃣ Debug - Ensure WAR File Exists
    - script: |
        ls -l $(Build.SourcesDirectory)/target/
      displayName: 'Debug: Check if WAR file exists'

    # 3️⃣ Build the Docker Image
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'  # Ensure correct path
        repository: '$(ACR_LOGIN_SERVER)/$(IMAGE_NAME)'
        tags: '$(IMAGE_TAG)'

    # 4️⃣ Login to Azure Container Registry (ACR)
    - script: |
        echo $(ACR_PASSWORD) | docker login $(ACR_LOGIN_SERVER) -u $(ACR_USERNAME) --password-stdin
      displayName: 'Login to ACR'

    # 5️⃣ Push Docker Image to ACR
    - task: Docker@2
      displayName: 'Push Docker Image to ACR'
      inputs:
        command: 'push'
        repository: '$(ACR_LOGIN_SERVER)/$(IMAGE_NAME)'
        tags: '$(IMAGE_TAG)'

- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: Build
  jobs:
  - job: Deploy
    steps:
    # 6️⃣ Authenticate to Azure and Configure `kubectl`
    - task: AzureCLI@2
      displayName: 'Configure kubectl'
      inputs:
        azureSubscription: 'vpconnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(AKS_CLUSTER)

    # 7️⃣ Deploy Application to AKS
    - task: Kubernetes@1
      displayName: 'Deploy to AKS'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: 'Your-Azure-Service-Connection'
        azureResourceGroup: $(RESOURCE_GROUP)
        kubernetesCluster: $(AKS_CLUSTER)
        namespace: 'default'
        command: 'apply'
        arguments: '-f deployment.yaml -f service.yaml'
