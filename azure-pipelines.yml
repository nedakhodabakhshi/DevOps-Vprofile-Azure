trigger:
- main

pool:
  vmImage: 'ubuntu-22.04'

variables:
- group: vProfile-Secrets
- name: IMAGE_TAG
  value: 'latest'

stages:
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: Build
    steps:

    - task: Maven@4
      displayName: 'Build with Maven'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean package'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '11'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx1024m'

    - script: |
        ls -l $(Build.SourcesDirectory)/target/
      displayName: 'Debug: Check if WAR file exists'

    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        repository: '$(ACR_LOGIN_SERVER)/$(IMAGE_NAME)'
        tags: '$(IMAGE_TAG)'

    - script: |
        echo $(ACR_PASSWORD) | docker login $(ACR_LOGIN_SERVER) -u $(ACR_USERNAME) --password-stdin
      displayName: 'Login to ACR'

    - task: Docker@2
      displayName: 'Push Docker Image to ACR'
      inputs:
        command: 'push'
        repository: '$(ACR_LOGIN_SERVER)/$(IMAGE_NAME)'
        tags: '$(IMAGE_TAG)'

- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: Build
  jobs:
  - job: Deploy
    steps:
    
    - task: AzureCLI@2
      displayName: 'Configure kubectl'
      inputs:
        azureSubscription: 'vpconnection'  
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Checking Available Subscriptions..."
          az account list --output table
          if ! az account show --subscription $(SUBSCRIPTION_ID) >/dev/null 2>&1; then
            echo "ERROR: Subscription ID $(SUBSCRIPTION_ID) not found!"
            exit 1
          fi
          az account set --subscription $(SUBSCRIPTION_ID)
          az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(AKS_CLUSTER) --overwrite-existing

    - script: |
        ls -l $(Build.SourcesDirectory)
      displayName: 'Debug: Check YAML Files'

    - task: AzureCLI@2
      displayName: 'Deploy to AKS'
      inputs:
        azureSubscription: 'vpconnection'  
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
